{
  "_args": [
    [
      {
        "raw": "gactions",
        "scope": null,
        "escapedName": "gactions",
        "name": "gactions",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/devinjanus/samanage-actionsdk"
    ]
  ],
  "_from": "gactions@latest",
  "_id": "gactions@0.0.0",
  "_inCache": true,
  "_location": "/gactions",
  "_nodeVersion": "6.9.5",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/gactions-0.0.0.tgz_1490689884492_0.8131897293496877"
  },
  "_npmUser": {
    "name": "keithwhor",
    "email": "keithwhor@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gactions",
    "scope": null,
    "escapedName": "gactions",
    "name": "gactions",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/gactions/-/gactions-0.0.0.tgz",
  "_shasum": "8b008dd62ec9db23d43c752605cf52c5c5498e1b",
  "_shrinkwrap": null,
  "_spec": "gactions",
  "_where": "/Users/devinjanus/samanage-actionsdk",
  "author": {
    "name": "Keith Horwood"
  },
  "dependencies": {},
  "description": "Helper for Actions on Google",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "8b008dd62ec9db23d43c752605cf52c5c5498e1b",
    "tarball": "https://registry.npmjs.org/gactions/-/gactions-0.0.0.tgz"
  },
  "gitHead": "f920250de29a3969ce1434b9bda6e74ef6c00d21",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "keithwhor",
      "email": "keithwhor@gmail.com"
    }
  ],
  "name": "gactions",
  "optionalDependencies": {},
  "readme": "# Actions on Google\n\nThis is a helper for [Google Assistant Actions](https://developers.google.com/actions/)\ndevelopment.\n\nIts main goal is to simplify complexity around project organization and enable\na better development workflow. At present, with `gactions` you can:\n\n1. Listen for intents based on a proprietary `action` Object and `handler`\n2. Automatically load intents from a predefined directory structure\n3. Compile `actionPackage`s from `action`s for easier deployment\n4. Automatically format structured [Conversation Responses](https://developers.google.com/actions/reference/conversation)\n\n## Installation\n\n```bash\n$ npm install gactions --save\n```\n\n## Setting Up Your Intents\n\nWith `gactions` you can add in intents inline (programmatically) or automatically\nload them from a directory structure. For project organization, we suggest loading\nfrom a directory, but either is fine.\n\n### Inline Intent Handling\n\n```javascript\nconst Action = require('gactions').Action;\nconst myAction = new Action('my assistant'); // any name works\n\n// Sets up MAIN intent\nmyAction.addIntent(\n  'MAIN',\n  {\n    description: 'None'\n  },\n  (user, device, conversation, query, callback) => {\n\n    // first parameter is error, second is text to speech\n    callback(null, 'Hey, welcome to your Assistant Action!');\n\n  }\n});\n\n/*\n  Sets up TEXT intent (name can be anything you'd like, though)\n  See https://developers.google.com/actions/reference/action-package#query_patterns\n    for \"queries\" details\n\n  Will be triggered on \"my name is Steven\" / etc.\n*/\nmyAction.addIntent(\n  'TEXT',\n  {\n    description: 'None',\n    queries: [\n      'My name is $SchemaOrg_Text:name'\n    ]\n  },\n  (user, device, conversation, query, callback) => {\n\n    /*\n      NOTE: Now query is object with `query.name.value` being set\n\n      Third parameter is an array of \"prompts\" --- if this is non-empty,\n        Google Assistant will expect further input from the user\n      Final parameter is what intents (in shorthand, like \"MAIN\") Google\n        Assistant should respond with\n    */\n    callback(\n      null,\n      `Hey, nice to meet you ${query.name.value}! Can I get you a coffee?`,\n      ['Are you still there?'],\n      ['MAIN']\n    );\n\n  }\n});\n```\n\n### Directory-Based Intent Handling\n\nFirst, set up a directory structure like:\n\n```\n\\- action\n   \\- intents\n      \\- main\n          - action.json\n          - handler.js\n      \\- text\n          - action.json\n          - handler.js\n```\n\nWhere `action.json` is a JSON object corresponding to the `action`s expected\nin the inline intent handling, and `handler.js` exports a function in the format:\n\n```javascript\nmodule.exports = (user, device, conversation, query, callback) => {}\n```\n\nYou can then load all your intents at once using:\n\n```javascript\nconst Action = require('gactions').Action;\nconst myAction = new Action('my assistant'); // any name works\n\nmyAction.loadIntents('./action/intents');\n```\n\n## Responding to HTTP Requests\n\nResponding to HTTP requests is simple --- but this library is non-opinionated\nas to how the HTTP request is sent in and processed. A full implementation may\nlook like this:\n\n```javascript\nconst Action = require('gactions').Action;\nconst myAction = new Action('my assistant'); // any name works\n\nmyAction.loadIntents('./action/intents');\n\n// Fictional HTTP Handler. Receives a JS object \"body\" from JSON\nmodule.exports = function HTTPHandler(body, callback) {\n\n  myAction.runIntent(body, (err, result, headers) => {\n\n    // Will populate a result Object and necessary HTTP headers to be\n    //   sent to the client - can just callback or can handle however we like :)\n    callback(err, result, headers);\n\n  });\n\n}\n```\n\n## Acknowledgements\n\nSpecial thanks to Google for doing an awesome job with Assistant! Hope you\nall enjoy playing as much as we have. :)\n",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.0.0"
}
